/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['simple-xmpp.js']) {
  _$jscoverage['simple-xmpp.js'] = [];
  _$jscoverage['simple-xmpp.js'][27] = 0;
  _$jscoverage['simple-xmpp.js'][28] = 0;
  _$jscoverage['simple-xmpp.js'][29] = 0;
  _$jscoverage['simple-xmpp.js'][30] = 0;
  _$jscoverage['simple-xmpp.js'][32] = 0;
  _$jscoverage['simple-xmpp.js'][40] = 0;
  _$jscoverage['simple-xmpp.js'][42] = 0;
  _$jscoverage['simple-xmpp.js'][45] = 0;
  _$jscoverage['simple-xmpp.js'][46] = 0;
  _$jscoverage['simple-xmpp.js'][47] = 0;
  _$jscoverage['simple-xmpp.js'][48] = 0;
  _$jscoverage['simple-xmpp.js'][49] = 0;
  _$jscoverage['simple-xmpp.js'][50] = 0;
  _$jscoverage['simple-xmpp.js'][51] = 0;
  _$jscoverage['simple-xmpp.js'][53] = 0;
  _$jscoverage['simple-xmpp.js'][54] = 0;
  _$jscoverage['simple-xmpp.js'][55] = 0;
  _$jscoverage['simple-xmpp.js'][58] = 0;
  _$jscoverage['simple-xmpp.js'][60] = 0;
  _$jscoverage['simple-xmpp.js'][61] = 0;
  _$jscoverage['simple-xmpp.js'][62] = 0;
  _$jscoverage['simple-xmpp.js'][63] = 0;
  _$jscoverage['simple-xmpp.js'][67] = 0;
  _$jscoverage['simple-xmpp.js'][69] = 0;
  _$jscoverage['simple-xmpp.js'][70] = 0;
  _$jscoverage['simple-xmpp.js'][71] = 0;
  _$jscoverage['simple-xmpp.js'][74] = 0;
  _$jscoverage['simple-xmpp.js'][76] = 0;
  _$jscoverage['simple-xmpp.js'][77] = 0;
  _$jscoverage['simple-xmpp.js'][78] = 0;
  _$jscoverage['simple-xmpp.js'][79] = 0;
  _$jscoverage['simple-xmpp.js'][80] = 0;
  _$jscoverage['simple-xmpp.js'][84] = 0;
  _$jscoverage['simple-xmpp.js'][86] = 0;
  _$jscoverage['simple-xmpp.js'][87] = 0;
  _$jscoverage['simple-xmpp.js'][88] = 0;
  _$jscoverage['simple-xmpp.js'][90] = 0;
  _$jscoverage['simple-xmpp.js'][91] = 0;
  _$jscoverage['simple-xmpp.js'][92] = 0;
  _$jscoverage['simple-xmpp.js'][93] = 0;
  _$jscoverage['simple-xmpp.js'][95] = 0;
  _$jscoverage['simple-xmpp.js'][96] = 0;
  _$jscoverage['simple-xmpp.js'][100] = 0;
  _$jscoverage['simple-xmpp.js'][101] = 0;
  _$jscoverage['simple-xmpp.js'][104] = 0;
  _$jscoverage['simple-xmpp.js'][107] = 0;
  _$jscoverage['simple-xmpp.js'][109] = 0;
  _$jscoverage['simple-xmpp.js'][110] = 0;
  _$jscoverage['simple-xmpp.js'][111] = 0;
  _$jscoverage['simple-xmpp.js'][112] = 0;
  _$jscoverage['simple-xmpp.js'][113] = 0;
  _$jscoverage['simple-xmpp.js'][114] = 0;
  _$jscoverage['simple-xmpp.js'][117] = 0;
  _$jscoverage['simple-xmpp.js'][119] = 0;
  _$jscoverage['simple-xmpp.js'][120] = 0;
  _$jscoverage['simple-xmpp.js'][121] = 0;
  _$jscoverage['simple-xmpp.js'][122] = 0;
  _$jscoverage['simple-xmpp.js'][123] = 0;
  _$jscoverage['simple-xmpp.js'][124] = 0;
  _$jscoverage['simple-xmpp.js'][126] = 0;
  _$jscoverage['simple-xmpp.js'][127] = 0;
  _$jscoverage['simple-xmpp.js'][128] = 0;
  _$jscoverage['simple-xmpp.js'][131] = 0;
  _$jscoverage['simple-xmpp.js'][137] = 0;
  _$jscoverage['simple-xmpp.js'][138] = 0;
  _$jscoverage['simple-xmpp.js'][145] = 0;
}
_$jscoverage['simple-xmpp.js'][27]++;
var xmpp = require("node-xmpp");
_$jscoverage['simple-xmpp.js'][28]++;
var EventEmitter = require("events").EventEmitter;
_$jscoverage['simple-xmpp.js'][29]++;
var util = require("util");
_$jscoverage['simple-xmpp.js'][30]++;
var qbox = require("qbox");
_$jscoverage['simple-xmpp.js'][32]++;
var STATUS = {AWAY: "away", DND: "dnd", XA: "xa", ONLINE: "online", OFFLINE: "offline"};
_$jscoverage['simple-xmpp.js'][40]++;
module.exports = new SimpleXMPP();
_$jscoverage['simple-xmpp.js'][42]++;
function SimpleXMPP() {
  _$jscoverage['simple-xmpp.js'][45]++;
  this.STATUS = STATUS;
  _$jscoverage['simple-xmpp.js'][46]++;
  var self = this;
  _$jscoverage['simple-xmpp.js'][47]++;
  this.Element = xmpp.Element;
  _$jscoverage['simple-xmpp.js'][48]++;
  var config;
  _$jscoverage['simple-xmpp.js'][49]++;
  var conn;
  _$jscoverage['simple-xmpp.js'][50]++;
  var probeBuddies = {};
  _$jscoverage['simple-xmpp.js'][51]++;
  var $ = qbox.create();
  _$jscoverage['simple-xmpp.js'][53]++;
  var events = new EventEmitter();
  _$jscoverage['simple-xmpp.js'][54]++;
  this.on = (function () {
  _$jscoverage['simple-xmpp.js'][55]++;
  events.on.apply(events, arguments);
});
  _$jscoverage['simple-xmpp.js'][58]++;
  this.send = (function (to, message) {
  _$jscoverage['simple-xmpp.js'][60]++;
  $.ready((function () {
  _$jscoverage['simple-xmpp.js'][61]++;
  var stanza = new xmpp.Element("message", {to: to, type: "chat"});
  _$jscoverage['simple-xmpp.js'][62]++;
  stanza.c("body").t(message);
  _$jscoverage['simple-xmpp.js'][63]++;
  conn.send(stanza);
}));
});
  _$jscoverage['simple-xmpp.js'][67]++;
  this.subscribe = (function (to) {
  _$jscoverage['simple-xmpp.js'][69]++;
  $.ready((function () {
  _$jscoverage['simple-xmpp.js'][70]++;
  var stanza = new xmpp.Element("presence", {to: to, type: "subscribe"});
  _$jscoverage['simple-xmpp.js'][71]++;
  conn.send(stanza);
}));
});
  _$jscoverage['simple-xmpp.js'][74]++;
  this.probe = (function (buddy, callback) {
  _$jscoverage['simple-xmpp.js'][76]++;
  probeBuddies[buddy] = true;
  _$jscoverage['simple-xmpp.js'][77]++;
  $.ready((function () {
  _$jscoverage['simple-xmpp.js'][78]++;
  var stanza = new xmpp.Element("presence", {type: "probe", to: buddy});
  _$jscoverage['simple-xmpp.js'][79]++;
  events.once("probe_" + buddy, callback);
  _$jscoverage['simple-xmpp.js'][80]++;
  conn.send(stanza);
}));
});
  _$jscoverage['simple-xmpp.js'][84]++;
  this.connect = (function (params) {
  _$jscoverage['simple-xmpp.js'][86]++;
  config = params;
  _$jscoverage['simple-xmpp.js'][87]++;
  conn = new xmpp.Client(params);
  _$jscoverage['simple-xmpp.js'][88]++;
  self.conn = conn;
  _$jscoverage['simple-xmpp.js'][90]++;
  conn.on("online", (function () {
  _$jscoverage['simple-xmpp.js'][91]++;
  conn.send(new xmpp.Element("presence"));
  _$jscoverage['simple-xmpp.js'][92]++;
  events.emit("online");
  _$jscoverage['simple-xmpp.js'][93]++;
  $.start();
  _$jscoverage['simple-xmpp.js'][95]++;
  setInterval((function () {
  _$jscoverage['simple-xmpp.js'][96]++;
  conn.send(new xmpp.Element("presence"));
}), 10000);
}));
  _$jscoverage['simple-xmpp.js'][100]++;
  conn.on("stanza", (function (stanza) {
  _$jscoverage['simple-xmpp.js'][101]++;
  events.emit("stanza", stanza);
  _$jscoverage['simple-xmpp.js'][104]++;
  if (stanza.is("message")) {
    _$jscoverage['simple-xmpp.js'][107]++;
    if (stanza.attrs.type == "chat") {
      _$jscoverage['simple-xmpp.js'][109]++;
      var body = stanza.getChild("body");
      _$jscoverage['simple-xmpp.js'][110]++;
      if (body) {
        _$jscoverage['simple-xmpp.js'][111]++;
        var message = body.getText();
        _$jscoverage['simple-xmpp.js'][112]++;
        var from = stanza.attrs.from;
        _$jscoverage['simple-xmpp.js'][113]++;
        var id = from.split("/")[0];
        _$jscoverage['simple-xmpp.js'][114]++;
        events.emit("chat", id, message);
      }
    }
  }
  else {
    _$jscoverage['simple-xmpp.js'][117]++;
    if (stanza.is("presence")) {
      _$jscoverage['simple-xmpp.js'][119]++;
      var from = stanza.attrs.from;
      _$jscoverage['simple-xmpp.js'][120]++;
      if (from) {
        _$jscoverage['simple-xmpp.js'][121]++;
        var id = from.split("/")[0];
        _$jscoverage['simple-xmpp.js'][122]++;
        var state = stanza.getChild("show")? stanza.getChild("show").getText(): STATUS.ONLINE;
        _$jscoverage['simple-xmpp.js'][123]++;
        state = (state == "chat")? STATUS.ONLINE: state;
        _$jscoverage['simple-xmpp.js'][124]++;
        state = (stanza.attrs.type == "unavailable")? STATUS.OFFLINE: state;
        _$jscoverage['simple-xmpp.js'][126]++;
        if (probeBuddies[id]) {
          _$jscoverage['simple-xmpp.js'][127]++;
          events.emit("probe_" + id, state);
          _$jscoverage['simple-xmpp.js'][128]++;
          delete probeBuddies[id];
        }
        else {
          _$jscoverage['simple-xmpp.js'][131]++;
          events.emit("buddy", id, state);
        }
      }
    }
  }
}));
  _$jscoverage['simple-xmpp.js'][137]++;
  conn.on("error", (function (err) {
  _$jscoverage['simple-xmpp.js'][138]++;
  events.emit("error", err);
}));
});
}
_$jscoverage['simple-xmpp.js'][145]++;
module.exports.SimpleXMPP = SimpleXMPP;
_$jscoverage['simple-xmpp.js'].source = ["/**","","    The MIT License","","    Copyright (c) 2011 Arunoda Susiripala","","    Permission is hereby granted, free of charge, to any person obtaining a copy","    of this software and associated documentation files (the \"Software\"), to deal","    in the Software without restriction, including without limitation the rights","    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell","    copies of the Software, and to permit persons to whom the Software is","    furnished to do so, subject to the following conditions:","","    The above copyright notice and this permission notice shall be included in","    all copies or substantial portions of the Software.","","    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR","    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,","    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE","    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER","    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,","    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN","    THE SOFTWARE.",""," */","","var xmpp = require('node-xmpp');","var EventEmitter = require('events').EventEmitter;","var util = require('util');","var qbox = require('qbox');","","var STATUS = {","    AWAY: \"away\",","    DND: \"dnd\",","    XA: \"xa\",","    ONLINE: \"online\",","    OFFLINE: \"offline\"","};","","module.exports = new SimpleXMPP();","","function SimpleXMPP() {","","    //setting status here","    this.STATUS = STATUS;","    var self = this;","    this.Element = xmpp.Element;","    var config;","    var conn;","    var probeBuddies = {};","    var $ = qbox.create();","","    var events = new EventEmitter();","    this.on = function() {","        events.on.apply(events, arguments);","    };","","    this.send = function(to, message) {","","        $.ready(function() {","            var stanza = new xmpp.Element('message', { to: to, type: 'chat' });","            stanza.c('body').t(message);","            conn.send(stanza);","        });","    };","","    this.subscribe = function(to) {","","        $.ready(function() {","            var stanza = new xmpp.Element('presence', { to: to, type: 'subscribe' });","            conn.send(stanza);","        });","    };","    this.probe = function(buddy, callback) {","","        probeBuddies[buddy] = true;","        $.ready(function() {","            var stanza = new xmpp.Element('presence', {type: 'probe', to: buddy});","            events.once('probe_' + buddy, callback);","            conn.send(stanza);","        });","    };","","    this.connect = function(params) {","","        config = params","        conn = new xmpp.Client(params);","        self.conn = conn;","","        conn.on('online', function(){","            conn.send(new xmpp.Element('presence'));","            events.emit('online');","            $.start();","            //make the connection live","            setInterval(function() {","               conn.send(new xmpp.Element('presence'));","            }, 1000 * 10)","        });","","        conn.on('stanza', function(stanza) {","            events.emit('stanza', stanza);","            //console.log(stanza);","            //looking for message stanza","            if (stanza.is('message')) {","","                //getting the chat message","                if(stanza.attrs.type == 'chat') {","","                    var body = stanza.getChild('body');","                    if(body) {","                        var message = body.getText();","                        var from = stanza.attrs.from;","                        var id = from.split('/')[0];","                        events.emit('chat', id, message);","                    }","                }","            } else if(stanza.is('presence')) {","                //looking for presence stenza for availability changes","                var from = stanza.attrs.from;","                if(from) {","                    var id = from.split('/')[0];","                    var state = (stanza.getChild('show'))? stanza.getChild('show').getText(): STATUS.ONLINE;","                    state = (state == 'chat')? STATUS.ONLINE : state;","                    state = (stanza.attrs.type == 'unavailable')? STATUS.OFFLINE : state;","                    //checking if this is based on probe","                    if(probeBuddies[id]) {","                        events.emit('probe_' + id, state);","                        delete probeBuddies[id];","                    } else {","                        //specifying roster changes","                        events.emit('buddy', id, state);","                    }","                }","            }","        });","","        conn.on('error', function(err) {","            events.emit('error', err);","        });","","    };","}","","// Allow for multiple connections","module.exports.SimpleXMPP = SimpleXMPP;"];
